--- a/ext/win32ole/win32ole.c
+++ b/ext/win32ole/win32ole.c
@@ -50,6 +50,8 @@ static volatile DWORD g_ole_initialized_key = TLS_OUT_OF_INDEXES;
 static BOOL g_uninitialize_hooked = FALSE;
 static BOOL g_cp_installed = FALSE;
 static BOOL g_lcid_installed = FALSE;
+static BOOL g_nano_checked = FALSE;
+static BOOL g_running_nano = FALSE;
 static HINSTANCE ghhctrl = NULL;
 static HINSTANCE gole32 = NULL;
 static FNCOCREATEINSTANCEEX *gCoCreateInstanceEx = NULL;
@@ -95,6 +97,7 @@ NORETURN(static void failed_load_conv51932(void));
 static void load_conv_function51932(void);
 #endif
 static UINT ole_init_cp(void);
+static BOOL running_nano_server(void);
 static void ole_freeexceptinfo(EXCEPINFO *pExInfo);
 static VALUE ole_excepinfo2msg(EXCEPINFO *pExInfo);
 static void ole_free(void *ptr);
@@ -817,18 +820,47 @@ ole_initialize(void)
     }
 
     if(g_ole_initialized == FALSE) {
-        hr = OleInitialize(NULL);
+        if(running_nano_server() == TRUE) {
+            hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
+        } else {
+            hr = OleInitialize(NULL);
+        }
         if(FAILED(hr)) {
             ole_raise(hr, rb_eRuntimeError, "fail: OLE initialize");
         }
         g_ole_initialized_set(TRUE);
 
-        hr = CoRegisterMessageFilter(&imessage_filter, &previous_filter);
-        if(FAILED(hr)) {
-            previous_filter = NULL;
-            ole_raise(hr, rb_eRuntimeError, "fail: install OLE MessageFilter");
+        if(running_nano_server() == FALSE) {
+            hr = CoRegisterMessageFilter(&imessage_filter, &previous_filter);
+            if(FAILED(hr)) {
+                previous_filter = NULL;
+                ole_raise(hr, rb_eRuntimeError, "fail: install OLE MessageFilter");
+            }
+        }
+    }
+}
+
+static BOOL
+running_nano_server(void)
+{
+    HKEY hsubkey;
+    LONG err;
+    VALUE subkey;
+
+    if(g_nano_checked == FALSE) {
+        subkey = rb_str_new2("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Server\\ServerLevels");
+        err = RegOpenKeyEx(HKEY_LOCAL_MACHINE, StringValuePtr(subkey), 0, KEY_READ, &hsubkey);
+        if (err == ERROR_SUCCESS) {
+            subkey = rb_str_new2("NanoServer");
+            err = RegQueryValueEx(hsubkey, StringValuePtr(subkey), NULL, NULL, NULL, NULL);
+            if (err == ERROR_SUCCESS) {
+                g_running_nano = TRUE;
+            }
+            RegCloseKey(hsubkey);
         }
+        g_nano_checked = TRUE;
     }
+    return g_running_nano;
 }
 
 static void
